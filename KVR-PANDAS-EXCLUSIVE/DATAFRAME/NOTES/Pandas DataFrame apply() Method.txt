	================================================
				Pandas DataFrame apply() Method
	================================================
=>Using this method we can apply different functions on rows and columns of the DataFrame. The objects passed to the method are Series objects whose index is either the DataFrame’s index (axis=0) or the DataFrame’s columns (axis=1).
=>After applying the method, it returns the Series or DataFrame along the given axis of the DataFrame. This function can be used when we want to alter a particular column without affecting other columns.
------------------------
Example 1: Applying a np.sum function to all the elements of DataFrame using the DataFrame.apply() Method
-------------------------------
The below example shows how we can apply the function to all the elements of the DataFrame over the axis. Here, in this example, we choose to function as np.sum, with default axis(axis=0) and axis=1.

import pandas as pd
import numpy as np
df=pd.DataFrame([[10,11,12],[20,21,22]],columns=['A','B','C'])
print("Applying sum function to all the elements of DataFrame")
print(df.apply(np.sum))
print(df.apply(np.sum,axis=1))
Once we run the program we will get the following output.
----------------------------------------------------------------------------------------------
Example 2: Applying user defined function to the DataFrame using DataFrame.apply() Method
We can pass a user-defined function as a parameter to the DataFrame.apply() function. The below example shows the same.

import pandas as pd
df=pd.DataFrame([[10,11,12],[20,21,22]],columns=['A','B','C'])
print(df)
def addex(x):
    return x+1
print(df.apply(addex))
Once we run the program we will get the following output.

  A   B   C
0  10  11  12
1  20  21  22
    A   B   C
0  11  12  13
1  21  22  23
----------------------------------------------------------------------------------------
Example 4: Applying a specific function to a selected column using DataFrame.apply() Method
If we want to change a particular column without affecting others, we can use DataFrame.apply() method like this.
In the below example we are altering only the 'Name' column by passing the lambda function to the DataFrame.apply() method and printing the output.

import pandas as pd
df1 = pd.DataFrame([['Rossum',75,80,90], ['Anurag',80,90,95],['Travis',80,82,85],['Hunter',95,92,95],['Ritche',85,90,89]], columns=['Name','Maths','Science','Social'])
df1['Name'] = df1['Name'].apply(lambda x: x.upper())
print(df1)
-----------------------------------------------------------------
Example 5: Applying a specific function to a selected column using DataFrame.apply() Method
In this example, we are altering the 'Science' column passing the lambda function to the DataFrame.apply() method.

import pandas as pd
df1 = pd.DataFrame([['Rossum',75,80,90], ['gosling',80,90,95],['Travis',80,82,85],['Hunter',95,92,95],['Ritche',85,90,89]], columns=['Name','Maths','Science','Social'])
print(df1)
df1['Science'] = df1['Science'].apply(lambda x: x+10)
print(df1)
--------------------------------
      Name  Maths  Science  Social
0   Rossum     75       80      90
1  gosling     80       90      95
2   Travis     80       82      85
3   Hunter     95       92      95
4   Ritche     85       90      89
-------------
      Name  Maths  Science  Social
0   Rossum     75       90      90
1  gosling     80      100      95
2   Travis     80       92      85
3   Hunter     95      102      95
4   Ritche     85      100      89
=======================================================================================================